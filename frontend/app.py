import os
import streamlit as st
from dotenv import load_dotenv
import pandas as pd
import uuid
from pathlib import Path
from utils.session import init_session_state, get_username, clear_chat_history
from utils.file_manager import list_available_files, upload_file, get_file_preview, remove_file, remove_all_files
from utils.chat import display_chat_messages, process_message, check_backend_status

# Carregar vari√°veis de ambiente com caminho correto
dotenv_path = os.path.join(os.path.dirname(
    os.path.dirname(__file__)), 'config', '.env')
load_dotenv(dotenv_path)
UPLOAD_FOLDER = os.getenv("UPLOAD_FOLDER", os.path.join(
    os.path.dirname(os.path.dirname(__file__)), "uploads"))

# Garantir que a pasta de uploads existe
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# Fun√ß√£o para processar submiss√£o da mensagem


def handle_message_submit():
    """
    Processa a submiss√£o da mensagem quando o usu√°rio pressiona Enter
    """
    if st.session_state.user_input:
        # Salvamos a mensagem em uma vari√°vel para processamento posterior
        st.session_state.submit_question = True
        # N√£o chamar st.rerun() dentro de callbacks


def file_selected():
    """
    Fun√ß√£o chamada quando um arquivo √© selecionado no dropdown
    """
    # Atualizar o arquivo selecionado na sess√£o
    st.session_state.selected_file = st.session_state.file_selector


def main():
    # Configura√ß√£o da p√°gina
    st.set_page_config(
        page_title="Assistente de An√°lise CSV",
        page_icon="üìä",
        layout="wide"
    )

    # Inicializar estado da sess√£o
    init_session_state()

    # Processar mensagem pendente (se houver)
    if st.session_state.submit_question:
        user_message = st.session_state.user_input
        process_message(user_message)
        # Limpar o campo de input ap√≥s processar a mensagem
        st.session_state.user_input = ""
        # Resetar a flag
        st.session_state.submit_question = False

    # Sidebar
    with st.sidebar:
        st.title("üìä Assistente CSV")

        # √Årea de login/usu√°rio
        st.subheader("üë§ Perfil do Usu√°rio")
        username = get_username()
        st.write(f"Conectado como: **{username}**")

        st.markdown("---")

        # Se√ß√£o de Upload
        st.subheader("üì§ Upload de Arquivos")
        uploaded_file = st.file_uploader(
            "Escolha um arquivo CSV ou ZIP contendo CSVs",
            type=["csv", "zip"],
            help="Voc√™ pode enviar arquivos CSV individuais ou um arquivo ZIP contendo m√∫ltiplos CSVs"
        )

        # Upload de arquivo
        if uploaded_file:
            # Verificar se este arquivo j√° foi processado nesta sess√£o
            file_key = f"{uploaded_file.name}_{uploaded_file.size}"

            if "processed_uploads" not in st.session_state:
                st.session_state.processed_uploads = set()

            if file_key not in st.session_state.processed_uploads:
                success, processed_files = upload_file(uploaded_file)
                if success:
                    st.success(
                        f"Arquivo '{uploaded_file.name}' enviado com sucesso!")
                    # Marcar este arquivo como processado
                    st.session_state.processed_uploads.add(file_key)
                    # Selecionar o primeiro arquivo processado
                    if processed_files:
                        st.session_state.selected_file = processed_files[0]
                    # Recarregar APENAS uma vez
                    st.rerun()
                else:
                    st.error("Erro ao fazer upload do arquivo.")
            # Se j√° foi processado, n√£o fazer nada (evita loop infinito)

        st.markdown("---")

        # Mostrar arquivos dispon√≠veis
        st.subheader("üìÅ Arquivos Dispon√≠veis")
        files = list_available_files()

        if files:
            # Bot√£o para remover todos os arquivos
            st.warning(
                f"üìä Total: {len(files)} arquivo(s) na base de conhecimento")

            if st.button("üóëÔ∏è LIMPAR TODA A BASE DE CONHECIMENTO", type="secondary", use_container_width=True):
                success, removed_count = remove_all_files()
                if success:
                    st.success(
                        f"‚úÖ Base de conhecimento limpa! {removed_count} arquivo(s) removido(s).")
                    st.rerun()
                else:
                    st.error("‚ùå Erro ao limpar a base de conhecimento.")

            st.markdown("---")

            # Se for o primeiro arquivo e nenhum foi selecionado, selecione-o automaticamente
            if len(files) == 1 and not st.session_state.selected_file:
                st.session_state.selected_file = files[0]

            # Usar o arquivo selecionado como valor inicial
            default_ix = 0
            if st.session_state.selected_file in files:
                default_ix = files.index(st.session_state.selected_file)

            # Usar key='file_selector' para a callback
            selected_file = st.selectbox(
                "Selecione um arquivo para consultas",
                files,
                index=default_ix,
                key="file_selector",
                on_change=file_selected
            )

            if selected_file:
                with st.expander("Detalhes do arquivo", expanded=True):
                    preview = get_file_preview(selected_file)
                    st.text(preview)

                # Bot√£o para perguntar sobre o arquivo espec√≠fico
                if st.button(f"Perguntar sobre {selected_file}"):
                    question = f"Me fale sobre o arquivo {selected_file}"
                    process_message(question)

                # Bot√£o para remover o arquivo selecionado
                if st.button("üóëÔ∏è Remover arquivo selecionado", key="remove_selected_sidebar"):
                    if remove_file(selected_file):
                        st.success(
                            f"Arquivo '{selected_file}' removido com sucesso!")
                        st.session_state.selected_file = None
                        st.rerun()
                    else:
                        st.error(
                            f"Erro ao remover o arquivo '{selected_file}'.")

            # Mostrar lista compacta de arquivos na sidebar
            st.markdown("---")
            st.caption("üìã Lista de arquivos:")
            for file in files:
                st.text(f"‚Ä¢ {file}")

        else:
            st.info(
                "Nenhum arquivo dispon√≠vel. Fa√ßa upload de um arquivo CSV para come√ßar.")

        st.markdown("---")

        # Status do Sistema na Sidebar
        st.subheader("üì° Status da Conex√£o")

        # Verificar status do backend
        backend_connected, backend_message = check_backend_status()
        if backend_connected:
            st.success(f"Backend: {backend_message}")
        else:
            st.error(f"Backend: {backend_message}")

        # Bot√£o para recarregar o status abaixo da mensagem
        if st.button("üîÑ Testar conex√£o", help="Verificar conex√£o novamente", key="refresh_backend_status"):
            st.rerun()

    # √Årea principal - Layout mais focado no chat
    st.title("üí¨ Chat com o Assistente CSV")

    # Expander com instru√ß√µes sempre dispon√≠vel
    with st.expander("‚ùì Como usar", expanded=False):
        st.markdown("""
        **Como usar o Assistente CSV:**
        
        1. **Upload de Arquivos**: Fa√ßa upload de arquivos CSV ou ZIP na barra lateral
        2. **Sele√ß√£o**: Selecione um arquivo para an√°lise na lista dispon√≠vel
        3. **Perguntas**: Digite perguntas em linguagem natural sobre seus dados
        4. **Resultados**: O assistente analisar√° os dados e fornecer√° respostas detalhadas
        
        **Exemplos de perguntas:**
        - "Quantas linhas tem o arquivo?"
        - "Quais s√£o as colunas dispon√≠veis?"
        - "Mostre as primeiras 10 linhas"
        - "Calcule a m√©dia da coluna X"
        - "Crie um gr√°fico das vendas por m√™s"
        
        **Recursos dispon√≠veis:**
        - An√°lise estat√≠stica autom√°tica
        - Gera√ß√£o de gr√°ficos e visualiza√ß√µes
        - Filtros e consultas personalizadas
        - Hist√≥rico de conversas
        """)

    # Mostrar o arquivo selecionado ao usu√°rio
    if st.session_state.selected_file:
        st.info(f"üìÑ Arquivo selecionado: **{st.session_state.selected_file}**")

    # √Årea do chat - agora ocupa mais espa√ßo
    display_chat_messages()

    # Campo de mensagem
    st.text_input(
        "Digite sua pergunta sobre os dados e pressione Enter para enviar...",
        key="user_input",
        placeholder="Ex: Quantas linhas tem o arquivo? Quais s√£o as colunas?",
        on_change=handle_message_submit
    )

    # Dica para o usu√°rio
    st.caption("üí° Pressione Enter para enviar sua pergunta")

    # Bot√µes de sugest√µes em layout horizontal
    st.write("**Sugest√µes r√°pidas:**")
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        if st.button("üìã Listar arquivos", use_container_width=True):
            process_message("Listar todos os arquivos CSV dispon√≠veis")
            st.rerun()

    with col2:
        if st.button("üìä Estat√≠sticas", use_container_width=True):
            process_message("Mostrar estat√≠sticas b√°sicas dos dados")
            st.rerun()

    with col3:
        if st.button("üè∑Ô∏è Verificar colunas", use_container_width=True):
            process_message("Quais s√£o as colunas dos arquivos?")
            st.rerun()

    with col4:
        if st.button("üßπ Limpar Chat", use_container_width=True):
            clear_chat_history()
            st.rerun()


if __name__ == "__main__":
    main()
